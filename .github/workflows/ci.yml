# .github/workflows/ci.yaml

name: Secure Build, Scan, and Push to ACR

on:
  push:
    branches: [ main ] # Start with main, add other branches later if needed (e.g., develop, staging)
  pull_request:
    branches: [ main ] # Also run scans on PRs to main

env:
  # ACR Secrets (Ensure these are set in GitHub Repo Settings > Secrets)
  REGISTRY: ${{ secrets.ACR_LOGIN_SERVER }}
  IMAGE_NAME_PREFIX: polling-app # Adjust if needed for your ACR naming structure

jobs:
  # ===========================================
  # Linting Job
  # ===========================================
  lint:
    name: Code Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18' # Or your project's required Node version

      - name: Install Frontend Dependencies & Lint
        working-directory: ./poll-frontend # Verify this path matches your project structure
        run: |
          npm ci # Use ci for faster, deterministic installs based on package-lock.json
          npm run lint # Assumes 'lint' script is defined in poll-frontend/package.json

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9' # Or your project's required Python version

      - name: Install Backend Dependencies & Lint
        working-directory: ./poll-api # Verify this path matches your project structure
        run: |
          pip install flake8 # Consider adding to a requirements-dev.txt instead
          # Example flake8 command - customize rules as needed
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # Add other linters (e.g., black, isort) if configured

  # ===========================================
  # Security Scanning Job (Secrets, SCA, SAST)
  # ===========================================
  security:
    name: Security Scanning (Secrets, SCA, SAST)
    runs-on: ubuntu-latest
    needs: [lint] # Ensures linting passes before scanning
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required for SonarCloud PR analysis & Gitleaks history scanning

      - name: Detect Secrets with Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Optional: allows interaction with GitHub API if needed by action features
          # GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE}} # Only required if using a Pro license
        # By default, this action will fail the job if secrets are detected

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18' # Match linting job

      - name: Run Snyk Scan (Frontend Dependencies - SCA)
        uses: snyk/actions/node@master
        continue-on-error: true # START HERE: Review results before enforcing failure. Remove later.
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }} # Required: Store in GitHub Secrets
        with:
          command: monitor # Use 'monitor' to track in Snyk UI, or 'test' to fail based on threshold
          args: --file=poll-frontend/package-lock.json --severity-threshold=high --org=suresh-things # Replace placeholder & adjust threshold

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9' # Match linting job

      - name: Run Snyk Scan (Backend Dependencies - SCA)
        uses: snyk/actions/python@master
        continue-on-error: true # START HERE: Review results before enforcing failure. Remove later.
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }} # Required
        with:
          command: monitor
          args: --file=poll-api/requirements.txt --severity-threshold=high --org=<your-snyk-org-name> # Replace placeholder & adjust threshold

      # --- SAST with SonarCloud (Optional: requires SonarCloud setup & secrets) ---
      - name: Set up JDK 17 for SonarScanner
        if: success() && secrets.SONAR_TOKEN != '' # Run only if Sonar secrets are configured
        uses: actions/setup-java@v3
        with:
          java-version: '17' # SonarScanner runs on JVM
          distribution: 'temurin' # Recommended distribution

      - name: Cache SonarCloud packages
        if: success() && secrets.SONAR_TOKEN != ''
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: SonarCloud Scan (SAST)
        if: success() && secrets.SONAR_TOKEN != ''
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to decorate PRs with analysis results
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}    # Required: Store in GitHub Secrets for authentication
        # No 'with:' block is needed if relying on automatic analysis or a sonar-project.properties file
        # If needed, provide args like this:
        # with:
        #   args: >
        #     -Dsonar.organization=${{ secrets.SONAR_ORG_KEY }} # Required if not auto-detected
        #     -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }} # Required if not auto-detected

  # ===========================================
  # Build, Scan Image, Push Job (Frontend)
  # ===========================================
  build-scan-push-frontend:
    name: Build, Scan, and Push Frontend
    runs-on: ubuntu-latest
    needs: [security] # Run only after security scans pass (or continue-on-error allows)
    # Conditional Execution: Only run this job on direct push events to the 'main' branch
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Azure Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.AZURE_CLIENT_ID }} # Assumes SPN Client ID stored as secret
          password: ${{ secrets.AZURE_CLIENT_SECRET }} # Assumes SPN Client Secret stored as secret

      - name: Set up Docker Buildx
        # Enables more advanced build features like caching
        uses: docker/setup-buildx-action@v3

      - name: Build frontend image (no push yet)
        id: docker_build_frontend # Give the step an ID to reference the image later
        uses: docker/build-push-action@v5
        with:
          context: ./poll-frontend # Path to the directory containing the Dockerfile
          push: false # Crucial: Do not push the image yet
          load: true # Load the built image into the local Docker daemon for scanning
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}/frontend:${{ github.sha }} # Unique tag for this build based on commit SHA
          cache-from: type=gha # Attempt to load cache from previous runs
          cache-to: type=gha,mode=max # Save cache for future runs

      - name: Scan Frontend image with Trivy
        id: scan-frontend
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}/frontend:${{ github.sha }}' # Reference the specific tag built
          format: 'table' # Output format in logs (options: table, json, template)
          exit-code: '1' # Fail the workflow step if vulnerabilities are found (exit code 1)
          ignore-unfixed: true # Don't fail on vulnerabilities that don't have a fix available yet
          vuln-type: 'os,library' # Scan for vulnerabilities in OS packages and application libraries
          severity: 'HIGH,CRITICAL' # Specify severities to fail on (e.g., MEDIUM,HIGH,CRITICAL)

      - name: Push Frontend Image to ACR
        # This step runs only if the previous steps in this job (build and scan) succeeded
        if: success()
        run: |
          echo "Pushing frontend image tagged with SHA and latest..."
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}/frontend:${{ github.sha }}
          # Also tag this SHA commit as 'latest' for the main branch
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}/frontend:${{ github.sha }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}/frontend:latest
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}/frontend:latest

  # ===========================================
  # Build, Scan Image, Push Job (API)
  # ===========================================
  build-scan-push-api:
    name: Build, Scan, and Push API
    runs-on: ubuntu-latest
    needs: [security] # Run only after security scans pass
    # Conditional Execution: Only run this job on direct push events to the 'main' branch
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Azure Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.AZURE_CLIENT_ID }}
          password: ${{ secrets.AZURE_CLIENT_SECRET }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build API image (no push yet)
        id: docker_build_api
        uses: docker/build-push-action@v5
        with:
          context: ./poll-api # Path to the API Dockerfile context
          push: false
          load: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}/api:${{ github.sha }} # Unique tag based on commit SHA
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Scan API image with Trivy
        id: scan-api
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}/api:${{ github.sha }}' # Scan the specific tag
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'HIGH,CRITICAL' # Fail only on High and Critical vulnerabilities

      - name: Push API Image to ACR
        # This step runs only if the previous steps (build and scan) succeeded
        if: success()
        run: |
          echo "Pushing API image tagged with SHA and latest..."
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}/api:${{ github.sha }}
          # Also tag this SHA commit as 'latest' for the main branch
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}/api:${{ github.sha }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}/api:latest
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}/api:latest