name: Secure Build, Scan, and Push to ACR

on:
  push:
    branches: [ main ] # Start with main, add other branches later
  pull_request:
    branches: [ main ] # Also run scans on PRs to main

env:
  # ACR Secrets
  REGISTRY: ${{ secrets.ACR_LOGIN_SERVER }}
  IMAGE_NAME_PREFIX: polling-app

jobs:
  # ===========================================
  # Linting Job
  # ===========================================
  lint:
    name: Code Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18' # Or your required version

      - name: Install Frontend Dependencies & Lint
        working-directory: ./poll-frontend # Ensure path is correct
        run: |
          npm ci # Use ci for faster, deterministic installs
          npm run lint # Assumes 'lint' script exists in package.json

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9' # Or your required version

      - name: Install Backend Dependencies & Lint
        working-directory: ./poll-api # Ensure path is correct
        run: |
          pip install flake8 # Or install from requirements-dev.txt if defined
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics # Example flake8 command
          # Add other linters if needed

  # ===========================================
  # Security Scanning Job (Secrets, SCA, SAST)
  # ===========================================
  security:
    name: Security Scanning (Secrets, SCA, SAST)
    runs-on: ubuntu-latest
    needs: [lint] # Run after linting passes
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required for SonarCloud PR analysis

      - name: Detect Secrets with Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          # GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE}} # Only required for Pro license
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Token for GitHub API interaction (uploading report artifact)
        # Fails the job if secrets are found by default

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Run Snyk Scan (Frontend Dependencies - SCA)
        uses: snyk/actions/node@master
        continue-on-error: true # Allow workflow to continue temporarily, review results
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: monitor # Sends dependency snapshot to Snyk for monitoring
          args: --file=poll-frontend/package-lock.json --severity-threshold=high --org=suresh-things # Adjust threshold and org
          # Use 'test' instead of 'monitor' to fail the build based on threshold

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Run Snyk Scan (Backend Dependencies - SCA)
        uses: snyk/actions/python@master
        continue-on-error: true # Allow workflow to continue temporarily, review results
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: monitor
          args: --file=poll-api/requirements.txt --severity-threshold=high --org=suresh-things # Adjust threshold and org

      # --- SAST with SonarCloud (Optional) ---
      - name: Set up JDK 17 for SonarScanner
        if: success() && secrets.SONAR_TOKEN != '' # Run only if Sonar secrets are configured
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache SonarCloud packages
        if: success() && secrets.SONAR_TOKEN != ''
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: SonarCloud Scan (SAST)
        # Keep the 'if' condition to run only when the secret exists
        if: success() && secrets.SONAR_TOKEN != ''
        uses: SonarSource/sonarcloud-github-action@master
        env:
          # Correct the GITHUB_TOKEN reference
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to decorate PRs
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}    # Required
        # REMOVE the 'with:' block entirely if relying on env vars and auto-config/properties file
        # OR provide actual arguments if needed, e.g.:
        # with:
        #   args: >
        #     -Dsonar.organization=${{ secrets.SONAR_ORG_KEY }}
        #     -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}

  # ===========================================
  # Build, Scan Image, Push Job (Frontend)
  # ===========================================
  build-scan-push-frontend:
    name: Build, Scan, and Push Frontend
    runs-on: ubuntu-latest
    needs: [security] # Run after security scans
    # Only run on push to main, not on PRs for the push step
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Azure Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.AZURE_CLIENT_ID }}
          password: ${{ secrets.AZURE_CLIENT_SECRET }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build frontend image (no push yet)
        id: docker_build_frontend
        uses: docker/build-push-action@v5
        with:
          context: ./poll-frontend
          push: false # Important: Do not push yet
          load: true # Load image into docker daemon for scanning
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}/frontend:${{ github.sha }} # Tag used for scanning
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Scan Frontend image with Trivy
        id: scan-frontend
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}/frontend:${{ github.sha }}'
          format: 'table'
          exit-code: '1' # Fail build if vulnerabilities are found
          ignore-unfixed: true # Don't fail for vulns with no fix available
          vuln-type: 'os,library'
          severity: 'HIGH,CRITICAL' # Fail only on High and Critical severity

      - name: Push Frontend Image to ACR
        if: success() # Only push if build and scan succeeded
        run: |
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}/frontend:${{ github.sha }}
          # Optionally push 'latest' tag as well for main branch
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}/frontend:${{ github.sha }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}/frontend:latest
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}/frontend:latest

  # ===========================================
  # Build, Scan Image, Push Job (API)
  # ===========================================
  build-scan-push-api:
    name: Build, Scan, and Push API
    runs-on: ubuntu-latest
    needs: [security]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Azure Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.AZURE_CLIENT_ID }}
          password: ${{ secrets.AZURE_CLIENT_SECRET }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build API image (no push yet)
        id: docker_build_api
        uses: docker/build-push-action@v5
        with:
          context: ./poll-api
          push: false
          load: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}/api:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Scan API image with Trivy
        id: scan-api
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}/api:${{ github.sha }}'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'HIGH,CRITICAL'

      - name: Push API Image to ACR
        if: success()
        run: |
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}/api:${{ github.sha }}
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}/api:${{ github.sha }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}/api:latest
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}/api:latest