# .github/workflows/ci.yaml

name: Secure Multi-Env CI (Build, Scan, Push)

on:
  push:
    branches:
      - main
      - staging # Trigger on staging branch
      - develop # Trigger on develop branch
  pull_request:
    branches: [ main, staging, develop ] # Scan PRs targeting these branches

env:
  # ACR Secrets (Ensure these are set in GitHub Repo Settings > Secrets)
  REGISTRY: ${{ secrets.ACR_LOGIN_SERVER }}
  IMAGE_NAME_PREFIX: polling-app # Adjust if needed for your ACR naming structure

jobs:
  # ===========================================
  # Linting Job (Runs for all triggers)
  # ===========================================
  lint:
    name: Code Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18' # Or your project's required Node version
      - name: Install Frontend Dependencies & Lint
        working-directory: ./poll-frontend # Verify this path matches your project structure
        run: |
          npm ci
          npm run lint # Assumes 'lint' script is defined in poll-frontend/package.json
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9' # Or your project's required Python version
      - name: Install Backend Dependencies & Lint
        working-directory: ./poll-api # Verify this path matches your project structure
        run: |
          pip install flake8 # Consider adding to a requirements-dev.txt instead
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

  # ===========================================
  # Security Scanning Job (Runs for all triggers)
  # ===========================================
  security:
    name: Security Scanning (Secrets, SCA, SAST)
    runs-on: ubuntu-latest
    needs: [lint] # Ensures linting passes before scanning
    env: # Job-level env for Sonar check
      SONAR_ENABLED: ${{ secrets.SONAR_TOKEN != '' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required for SonarCloud PR analysis & Gitleaks history scanning
      - name: Detect Secrets with Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      - name: Run Snyk Scan (Frontend Dependencies - SCA)
        uses: snyk/actions/node@master
        continue-on-error: true # START HERE: Review results before enforcing failure. Remove later.
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }} # Required: Store in GitHub Secrets
        with:
          command: monitor # Use 'monitor' to track in Snyk UI, or 'test' to fail based on threshold
          args: --file=poll-frontend/package-lock.json --severity-threshold=high --org=suresh-things # Replace placeholder & adjust threshold
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
      - name: Run Snyk Scan (Backend Dependencies - SCA)
        uses: snyk/actions/python@master
        continue-on-error: true # START HERE: Review results before enforcing failure. Remove later.
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }} # Required
        with:
          command: monitor
          args: --file=poll-api/requirements.txt --severity-threshold=high --org=suresh-things # Replace placeholder & adjust threshold
      # --- SAST with SonarCloud (Optional) ---
      - name: Set up JDK 17
        if: success() && env.SONAR_ENABLED == 'true'
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Cache SonarCloud packages
        if: success() && env.SONAR_ENABLED == 'true'
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: SonarCloud Scan (SAST)
        if: success() && env.SONAR_ENABLED == 'true'
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.organization=${{ secrets.SONAR_ORG_KEY }}
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}

  # ===========================================
  # Build, Scan Image, Push Job (Frontend)
  # ===========================================
  build-scan-push-frontend:
    name: Build, Scan, Push Frontend
    runs-on: ubuntu-latest
    needs: [security] # Run only after security scans pass
    # Conditional Execution: Only run push step on direct pushes to deployment branches
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/develop')
    # NO 'outputs' needed anymore

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Derive Image Tag from Branch
        id: derive-tag # Still need ID for use within this job
        run: |
          BRANCH_NAME="${{ github.ref_name }}"
          SHA_SHORT=$(echo "${{ github.sha }}" | cut -c1-7)
          TAG=""
          if [[ "$BRANCH_NAME" == "develop" ]]; then TAG="dev-${SHA_SHORT}";
          elif [[ "$BRANCH_NAME" == "staging" ]]; then TAG="staging-${SHA_SHORT}";
          elif [[ "$BRANCH_NAME" == "main" ]]; then TAG="${SHA_SHORT}";
          else TAG="branch-${BRANCH_NAME}-${SHA_SHORT}"; fi
          echo "Using tag: $TAG"
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Log in to Azure Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.AZURE_CLIENT_ID }}
          password: ${{ secrets.AZURE_CLIENT_SECRET }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build frontend image (no push yet)
        id: docker_build_frontend
        uses: docker/build-push-action@v5
        with:
          context: ./poll-frontend
          push: false
          load: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}/frontend:${{ steps.derive-tag.outputs.tag }} # Use derived tag
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Scan Frontend image with Trivy
        id: scan-frontend
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}/frontend:${{ steps.derive-tag.outputs.tag }}' # Scan derived tag
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'HIGH,CRITICAL'

      - name: Push Frontend Image to ACR
        if: success() # Only push if build and scan succeeded
        run: |
          TAG="${{ steps.derive-tag.outputs.tag }}"
          IMAGE_REF="${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}/frontend"
          echo "Pushing frontend image ${IMAGE_REF}:${TAG}"
          docker push "${IMAGE_REF}:${TAG}"
          # If main branch, also push 'latest' tag
          if [[ "${{ github.ref_name }}" == "main" ]]; then
            echo "Tagging and pushing frontend:latest for main branch"
            docker tag "${IMAGE_REF}:${TAG}" "${IMAGE_REF}:latest"
            docker push "${IMAGE_REF}:latest"
          fi

  # ===========================================
  # Build, Scan Image, Push Job (API)
  # ===========================================
  build-scan-push-api:
    name: Build, Scan, and Push API
    runs-on: ubuntu-latest
    needs: [security] # Run only after security scans pass
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/develop')
    # NO 'outputs' needed anymore

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Derive Image Tag from Branch
        id: derive-tag # Still need ID for use within this job
        run: |
          BRANCH_NAME="${{ github.ref_name }}"
          SHA_SHORT=$(echo "${{ github.sha }}" | cut -c1-7)
          TAG=""
          if [[ "$BRANCH_NAME" == "develop" ]]; then TAG="dev-${SHA_SHORT}";
          elif [[ "$BRANCH_NAME" == "staging" ]]; then TAG="staging-${SHA_SHORT}";
          elif [[ "$BRANCH_NAME" == "main" ]]; then TAG="${SHA_SHORT}";
          else TAG="branch-${BRANCH_NAME}-${SHA_SHORT}"; fi
          echo "Using tag: $TAG"
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Log in to Azure Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.AZURE_CLIENT_ID }}
          password: ${{ secrets.AZURE_CLIENT_SECRET }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build API image (no push yet)
        id: docker_build_api
        uses: docker/build-push-action@v5
        with:
          context: ./poll-api
          push: false
          load: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}/api:${{ steps.derive-tag.outputs.tag }} # Use derived tag
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Scan API image with Trivy
        id: scan-api
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}/api:${{ steps.derive-tag.outputs.tag }}' # Scan derived tag
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'HIGH,CRITICAL'

      - name: Push API Image to ACR
        if: success() # Only push if build and scan succeeded
        run: |
          TAG="${{ steps.derive-tag.outputs.tag }}"
          IMAGE_REF="${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}/api"
          echo "Pushing API image ${IMAGE_REF}:${TAG}"
          docker push "${IMAGE_REF}:${TAG}"
          # If main branch, also push 'latest' tag
          if [[ "${{ github.ref_name }}" == "main" ]]; then
            echo "Tagging and pushing api:latest for main branch"
            docker tag "${IMAGE_REF}:${TAG}" "${IMAGE_REF}:latest"
            docker push "${IMAGE_REF}:latest"
          fi